{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Nodejs Rest App API",
    "description": "Find out how your APIs work",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [{ "url": "https://nodejs-rest-api-ry5x.onrender.com" }],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Contacts",
      "description": "Contacts endpoints"
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "in": "header",
      "name": "access_token"
    }
  },

  "paths": {
    "/api/users/register": {
      "post": {
        "summary": "User registration",
        "tags": ["Users"],
        "description": "User registration in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User registration",
            "schema": {
              "$ref": "#/definitions/RegistrationRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "User created, registration successful",
            "schema": {
              "$ref": "#/definitions/RegistrationResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },

    "/api/users/login": {
      "post": {
        "summary": "User login",
        "tags": ["Users"],
        "description": "User login in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User login",
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Login Successful",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },

    "/api/users/logout": {
      "post": {
        "summary": "User logout",
        "tags": ["Users"],
        "description": "User logout",
        "security": [{ "JWT": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Logout Successful, No content"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },

    "/api/users/verify/:verificationToken": {
      "get": {
        "summary": "User verification",
        "tags": ["Users"],
        "description": "User verification",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User verification",
            "schema": {
              "$ref": "#/definitions/Verify"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Verification successful",
            "schema": {
              "$ref": "#/definitions/Verify"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },

    "/api/users/current": {
      "get": {
        "summary": "Current user",
        "tags": ["Users"],
        "description": "Current user",
        "security": [{ "JWT": [] }],
        "parameters": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Get current user successful",
            "schema": {
              "$ref": "#/definitions/CurrentUserResponse"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },

    "/api/users": {
      "patch": {
        "summary": "Subscription updating",
        "tags": ["Users"],
        "description": "Subscription updating",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Subscription updating",
            "schema": {
              "$ref": "#/definitions/UpdateSubscriptionRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Subscription updated successful",
            "schema": {
              "$ref": "#/definitions/UpdateSubscriptionResponse"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },

    "/api/users/avatars": {
      "patch": {
        "summary": "Avatar updating",
        "tags": ["Users"],
        "description": "Avatar updating",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Avatar updating",
            "schema": {
              "$ref": "#/definitions/UpdateAvatarRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Avatar updated successful",
            "schema": {
              "$ref": "#/definitions/UpdateAvatarRequest"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },

    "/api/contacts": {
      "get": {
        "summary": "Get all contacts",
        "tags": ["Contacts"],
        "description": "All contacts",
        "security": [{ "JWT": [] }],
        "parameters": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "All contacts",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "post": {
        "summary": "Add contact",
        "tags": ["Contacts"],
        "description": "Add contact",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "contact",
            "in": "body",
            "description": "Add contact",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Add contact",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },

    "/api/contacts/:contactId": {
      "get": {
        "summary": "Get contact by Id",
        "tags": ["Contacts"],
        "description": "Get contact by Id",
        "security": [{ "JWT": [] }],
        "parameters": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "All contacts",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete contact",
        "tags": ["Contacts"],
        "description": "Delete contact",
        "security": [{ "JWT": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Contact deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update contact",
        "tags": ["Contacts"],
        "description": "Update contact",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "contact",
            "in": "body",
            "description": "Update contact",
            "schema": {
              "$ref": "#/definitions/ContactId"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Update contact",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },

    "/api/contacts/:contactId/favorite": {
      "patch": {
        "summary": "Update status contact",
        "tags": ["Contacts"],
        "description": "Update status contact",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "contact",
            "in": "body",
            "description": "Update status contact",
            "schema": {
              "$ref": "#/definitions/ContactId"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Update status contact",
            "schema": {
              "$ref": "#/definitions/FavoriteContact"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },

  "definitions": {
    "User": {
      "properties": {
        "email": { "type": "string" },
        "password": { "type": "string" },
        "subscription": { "type": "string" },
        "verify": { "type": "string" },
        "verificationToken": { "type": "string" },
        "avatarURL": { "type": "string" }
      }
    },

    "RegistrationRequest": {
      "type": "object",
      "required": ["name", "email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
          "format": "email",
          "example": "mango@email.com"
        },
        "password": {
          "type": "string",
          "description": "User's password. It must contain only Latin letters; may contain numbers, signs, letters in different case; does not contain a space.",
          "example": "Mango12378"
        }
      }
    },
    "RegistrationResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User's email",
          "format": "email",
          "example": "mango@email.com"
        },
        "subscription": {
          "type": "string",
          "description": "User's subscription",
          "example": "starter"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "description": "User's email.  It must contain only Latin letters; may include numbers, letters in different case",
          "format": "email",
          "example": "mango@email.com"
        },
        "password": {
          "type": "string",
          "description": "User's password. It must contain only Latin letters, at least one uppercase, lowercase letter and a number; does not contain a space",
          "example": "Mango12378"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "description": "User's token",
          "format": "Bearer Token"
        },
        "user": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email",
              "example": "mango@email.com"
            },
            "subscription": {
              "type": "string",
              "description": "User's subscription",
              "example": "starter"
            }
          }
        }
      }
    },
    "CurrentUserResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User's email",
          "format": "email",
          "example": "mango@email.com"
        },
        "subscription": {
          "type": "string",
          "description": "User's subscription",
          "example": "starter"
        }
      }
    },
    "UpdateSubscriptionRequest": {
      "type": "object",
      "required": ["subscription"],
      "properties": {
        "subscription": {
          "type": "string",
          "description": "User's subscription. Subscription field must be one of the next value - starter, pro or business",
          "enum": ["starter", "pro", "business"],
          "example": "pro"
        }
      }
    },
    "UpdateSubscriptionResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "User's subscription",
          "example": "pro"
        }
      }
    },
    "UpdateAvatarRequest": {
      "type": "object",
      "required": ["avatarURL"],
      "properties": {
        "avatarURL": {
          "type": "string",
          "description": "User's avatar"
        }
      }
    },
    "UpdateAvatarResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "User's avatar",
          "example": "Avatar changed"
        }
      }
    },

    "RegisterUser": {
      "properties": {
        "email": { "type": "string" },
        "password": { "type": "string" },
        "subscription": { "type": "string" }
      }
    },

    "CurrentUser": {
      "properties": {
        "email": { "type": "string" },
        "subscription": { "type": "string" }
      }
    },

    "UpdateSubscription": {
      "properties": {
        "_id": { "type": "string" },
        "subscription": { "type": "string" }
      }
    },

    "UpdateAvatar": {
      "properties": {
        "_id": { "type": "string" },
        "avatarURL": { "type": "string" }
      }
    },

    "UserId": {
      "properties": {
        "_id": { "type": "string" }
      }
    },

    "Verify": {
      "properties": {
        "verificationToken": { "type": "string" }
      }
    },

    "Contact": {
      "properties": {
        "email": { "type": "string" },
        "name": { "type": "string" },
        "phone": { "type": "string" },
        "favorite": { "type": "boolean" },
        "owner": { "type": "string" }
      }
    },

    "ContactId": {
      "properties": {
        "id": { "type": "string" }
      }
    },

    "FavoriteContact": {
      "properties": {
        "favorite": { "type": "boolean" }
      }
    }
  }
}
