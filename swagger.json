{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "Swagger Nodejs Rest Api",
    "description": "Showing off Nodejs rest Api work",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://nodejs-rest-api-ry5x.onrender.com" }],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Contacts",
      "description": "Contacts endpoints"
    }
  ],
  
  "paths": {
    "/api/users/register": {
      "post": {
        "summary": "User registration",
        "tags": ["Users"],
        "description": "User registration in system",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },       
        "responses": {
          "201": {
            "description": "User created, registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },          
          "409": {
            "description": "Conflict (Provided email already exists)",
            "content": {}
          }
        }
      }
    },

    "/api/users/login": {
      "post": {
        "summary": "User login",
        "tags": ["Users"],
        "description": "User login in system",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },

    "/api/users/logout": {
      "post": {
        "summary": "User logout",
        "tags": ["Users"],
        "description": "User logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Logout Successful, No content",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },    

    "/api/users/current": {
      "get": {
        "summary": "Current user",
        "tags": ["Users"],
        "description": "Current user",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Get current user successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }            
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },

    "/api/users": {
      "patch": {
        "summary": "Subscription updating",
        "tags": ["Users"],
        "description": "Subscription updating",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Subscription updating",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSubscriptionResponse"
                }
              }
            }            
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },

    "/api/users/avatars": {
      "patch": {
        "summary": "Avatar updating",
        "tags": ["Users"],
        "description": "Avatar updating",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Avatar updating",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar updated successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAvatarResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },

    "/api/contacts": {
      "get": {
        "summary": "Get all contacts",
        "tags": ["Contacts"],
        "description": "All contacts",
        "security": [{ "Bearer": [] }],
        "parameters": [],        
        "responses": {
          "200": {
            "description": "All contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      },
      "post": {
        "summary": "Add contact",
        "tags": ["Contacts"],
        "description": "Add contact",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Add contact",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },

    "/api/contacts/:contactId": {
      "get": {
        "summary": "Get contact by Id",
        "tags": ["Contacts"],
        "description": "Get contact by Id",
        "security": [{ "Bearer": [] }],
        "parameters": [],       
        "responses": {
          "200": {
            "description": "All contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      },
      "delete": {
        "summary": "Delete contact",
        "tags": ["Contacts"],
        "description": "Delete contact",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Contact deleted",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      },
      "put": {
        "summary": "Update contact",
        "tags": ["Contacts"],
        "description": "Update contact",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Update contact",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },

    "/api/contacts/:contactId/favorite": {
      "patch": {
        "summary": "Update status contact",
        "tags": ["Contacts"],
        "description": "Update status contact",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Update status contact",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        },        
        "responses": {
          "200": {
            "description": "Update status contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    }
  },

  "components": {
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "properties": {
          "email": { "type": "string" },
          "password": { "type": "string" },
          "subscription": { "type": "string" },
          "verify": { "type": "string" },
          "verificationToken": { "type": "string" },
          "avatarURL": { "type": "string" }
        }
      },

      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "mango@email.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. It must contain only Latin letters; may contain numbers, signs, letters in different case; does not contain a space.",
            "example": "Mango12378"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "mango@email.com"
          },
          "subscription": {
            "type": "string",
            "description": "User's subscription",
            "example": "starter"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email.  It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "zirdekoltu@gufum.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. It must contain only Latin letters, at least one uppercase, lowercase letter and a number; does not contain a space",
            "example": "krasota"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "User's token",
            "format": "Bearer Token"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "mango@email.com"
              },
              "subscription": {
                "type": "string",
                "description": "User's subscription",
                "example": "starter"
              }
            }
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "mango@email.com"
          },
          "subscription": {
            "type": "string",
            "description": "User's subscription",
            "example": "starter"
          }
        }
      },
      "UpdateSubscriptionRequest": {
        "type": "object",
        "required": ["subscription"],
        "properties": {
          "subscription": {
            "type": "string",
            "description": "User's subscription. Subscription field must be one of the next value - starter, pro or business",
            "enum": ["starter", "pro", "business"],
            "example": "pro"
          }
        }
      },
      "UpdateSubscriptionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "User's subscription",
            "example": "pro"
          }
        }
      },
      "UpdateAvatarRequest": {
        "type": "object",
        "required": ["avatarURL"],
        "properties": {
          "avatarURL": {
            "type": "string",
            "description": "User's avatar"
          }
        }
      },
      "UpdateAvatarResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "User's avatar",
            "example": "Avatar changed"
          }
        }
      },

      "RegisterUser": {
        "properties": {
          "email": { "type": "string" },
          "password": { "type": "string" },
          "subscription": { "type": "string" }
        }
      },

      "CurrentUser": {
        "properties": {
          "email": { "type": "string" },
          "subscription": { "type": "string" }
        }
      },

      "UpdateSubscription": {
        "properties": {
          "_id": { "type": "string" },
          "subscription": { "type": "string" }
        }
      },

      "UpdateAvatar": {
        "properties": {
          "_id": { "type": "string" },
          "avatarURL": { "type": "string" }
        }
      },

      "UserId": {
        "properties": {
          "_id": { "type": "string" }
        }
      },

      "Verify": {
        "properties": {
          "verificationToken": { "type": "string" }
        }
      },

      "Contact": {
        "properties": {
          "email": { "type": "string" },
          "name": { "type": "string" },
          "phone": { "type": "string" },
          "favorite": { "type": "boolean" },
          "owner": { "type": "string" }
        }
      },

      "ContactId": {
        "properties": {
          "id": { "type": "string" }
        }
      },

      "FavoriteContact": {
        "properties": {
          "favorite": { "type": "boolean" }
        }
      }
    }
  }
}
